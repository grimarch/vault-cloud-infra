#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# Get the directory where the script is located
SCRIPT_DIR_REAL=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)

# Assume the project root is one level up from the script's directory
PROJECT_ROOT=$(cd "${SCRIPT_DIR_REAL}/.." &>/dev/null && pwd)

# Change to the project root directory so all subsequent commands run from there
cd "$PROJECT_ROOT" || { echo "ERROR: Could not change to project root directory: $PROJECT_ROOT"; exit 1; }

echo "INFO: Running deploy script from project root: $PROJECT_ROOT"

# üîñ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
export TF_CLI_ARGS="-no-color" # disable color output for terraform
TIMESTAMP=$(date '+%Y-%m-%d_%H-%M-%S')
LOGDIR="logs"
SCRIPT_LOGFILE="${LOGDIR}/${TIMESTAMP}-script.log"
mkdir -p "$LOGDIR"

# üìù –ó–∞–ø–∏—Å—å –≤—Å–µ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥ + –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω
exec > >(tee -a "$SCRIPT_LOGFILE") 2>&1

# Define colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# üé® –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
export PS4='[RUN] '
set -x

log_info "üì¶ ==== –°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Terraform –∏ Vault ===="

# Check for required tools
for cmd in terraform vault jq ssh docker; do
    if ! command -v "$cmd" &> /dev/null; then
        log_error "–ö–æ–º–∞–Ω–¥–∞ '$cmd' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏."
        exit 1
    fi
done

# ‚ùì –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
read -rp "üß® –•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'terraform destroy' –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é? (y/N): " CONFIRM_DESTROY
if [[ "$CONFIRM_DESTROY" =~ ^[Yy]$ ]]; then
    log_info "üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –∏ terraform destroy..."
    terraform destroy -auto-approve || {
        log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ destroy. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤—ã—à–µ."
        exit 1
    }
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
    rm -rfv .terraform \
        terraform.tfstate \
        terraform.tfstate.backup \
        .terraform.lock.hcl \
        .vault_docker_lab_1_init \
        .vault_docker_lab_1_init.json \
        .vault-setup-info.txt \
        .vault_keys.json \
        stage1.tfplan \
        stage2.tfplan
    log_success "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
fi

log_info "üöß Stage 1: –°–æ–∑–¥–∞–Ω–∏–µ Droplet –∏ Floating IP..."

log_info "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Terraform..."
terraform init -upgrade || { 
    log_error "‚ùå –û—à–∏–±–∫–∞ terraform init. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ."; 
    exit 1; 
}

log_info "üìù –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã DigitalOcean..."
STAGE1_PLAN_LOGFILE="${LOGDIR}/${TIMESTAMP}-terraform-plan-stage1.log"
terraform plan -out=stage1.tfplan \
  -target=digitalocean_droplet.vault_host \
  -target=digitalocean_floating_ip.vault_fip \
  -target=digitalocean_floating_ip_assignment.vault_fip_assign \
  -target=local_file.vault_init_placeholder \
  > "$STAGE1_PLAN_LOGFILE" || {
    log_error "‚ùå –û—à–∏–±–∫–∞ terraform plan (stage1). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ $STAGE1_PLAN_LOGFILE"
    exit 1
  }

log_info "üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ stage1.tfplan..."
STAGE1_APPLY_LOGFILE="${LOGDIR}/${TIMESTAMP}-terraform-apply-stage1.log"
terraform apply stage1.tfplan 2>&1 | tee -a "$STAGE1_APPLY_LOGFILE" || {
    log_error "‚ùå –û—à–∏–±–∫–∞ terraform apply (stage1). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ $STAGE1_APPLY_LOGFILE"
    exit 1
}

log_info "üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

# –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
FLOATING_IP=$(terraform output -raw floating_ip_address 2>/dev/null)
DROPLET_IP=$(terraform output -raw droplet_public_ip 2>/dev/null)

if [[ -z "$FLOATING_IP" ]]; then
    log_warning "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å floating_ip_address –∏–∑ Terraform output, –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å droplet_public_ip"
    if [[ -z "$DROPLET_IP" ]]; then
        log_error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ floating_ip_address, –Ω–∏ droplet_public_ip –∏–∑ Terraform output"
        exit 1
    fi
    FLOATING_IP="$DROPLET_IP"
    log_warning "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∞–¥—Ä–µ—Å Droplet –≤–º–µ—Å—Ç–æ Floating IP: $FLOATING_IP"
fi

log_info "üîê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
export FLOATING_IP
export DOCKER_HOST="tcp://${FLOATING_IP}:2375"
export TF_VAR_docker_host="tcp://${FLOATING_IP}:2375"
export TF_VAR_droplet_ip="${FLOATING_IP}"
export TF_VAR_ssh_private_key_path="/home/archie/.ssh/id_ed25519_personal"

echo "FLOATING_IP=${FLOATING_IP}"
echo "DOCKER_HOST=${DOCKER_HOST}"
echo "TF_VAR_docker_host=${TF_VAR_docker_host}"
echo "TF_VAR_droplet_ip=${TF_VAR_droplet_ip}"
echo "TF_VAR_ssh_private_key_path=${TF_VAR_ssh_private_key_path}"

log_info "üöß Stage 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vault –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É..."

STAGE2_PLAN_LOGFILE="${LOGDIR}/${TIMESTAMP}-terraform-plan-stage2.log"
log_info "üîß –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (Docker, Vault init/unseal)..."
terraform plan -out=stage2.tfplan 2>&1 | tee -a "$STAGE2_PLAN_LOGFILE" || {
    log_error "‚ùå –û—à–∏–±–∫–∞ terraform plan (stage2). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤ $STAGE2_PLAN_LOGFILE"
    exit 1
}

log_info "üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ stage2.tfplan –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
STAGE2_APPLY_LOGFILE="${LOGDIR}/${TIMESTAMP}-terraform-apply-stage2.log"
terraform apply -auto-approve stage2.tfplan 2>&1 | tee -a "$STAGE2_APPLY_LOGFILE" || {
    log_error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ stage2.tfplan. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ $STAGE2_APPLY_LOGFILE"
    exit 1
}

log_success "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Vault –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
log_info "üëâ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Vault –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
log_info "   export VAULT_ADDR=https://${FLOATING_IP}:8200"
log_info "   export VAULT_SKIP_VERIFY=true"

echo ""
log_info "üìÑ ==== –°–≤–æ–¥–∫–∞ –ª–æ–≥–æ–≤ ===="
log_info "üóÇÔ∏è  –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ —Å–∫—Ä–∏–ø—Ç–∞:             $SCRIPT_LOGFILE"
log_info "üìò Terraform –ø–ª–∞–Ω (stage 1):          $STAGE1_PLAN_LOGFILE"
log_info "üìó Terraform –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (stage 1):    $STAGE1_APPLY_LOGFILE"
log_info "üìò Terraform –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ (stage 2):    $STAGE2_APPLY_LOGFILE"
log_info "üìô –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Vault:      .vault-setup-info.txt"

echo ""
log_success "‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à—ë–Ω –±–µ–∑ –æ—à–∏–±–æ–∫."
log_info "üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏:  less $SCRIPT_LOGFILE"
